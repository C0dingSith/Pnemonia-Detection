{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1EUH7Gjb2hAQvvIiMgVjA5poGq4LsfOk7","timestamp":1678036928988}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"TiM6gYg0nhkY"},"source":["<font color=\"#de3023\"><h1><b>REMINDER MAKE A COPY OF THIS NOTEBOOK, DO NOT EDIT</b></h1></font>"]},{"cell_type":"markdown","metadata":{"id":"T4sLmjIuDpmY"},"source":["![](https://storage.googleapis.com/kaggle-competitions/kaggle/10338/logos/header.png)"]},{"cell_type":"markdown","metadata":{"id":"3veiK-TXoGSV"},"source":["Today, we'll use neural networks for pneumonia detection! We'll practice creating toy neural networks, apply neural networks (including Convolutional Neural Nets!) to our pneumonia data, and experiment with *transfer learning*: learning from an existing \"expert network\"."]},{"cell_type":"markdown","metadata":{"id":"Tsa9kzHFh4yU"},"source":["In this notebook we'll be:\n","1.   Building Neural Networks with Keras\n","2.   Implementing Transfer Learning\n","3.   Evalulating our ML models\n","\n"]},{"cell_type":"code","metadata":{"id":"aSeClkWgIORK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678594822647,"user_tz":480,"elapsed":1504,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"0e706a1a-78fa-4336-8968-fd47344d8b0b"},"source":["#@title Run this to download data and prepare our environment! { display-mode: \"form\" }\n","import numpy as np\n","import pandas as pd\n","\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from sklearn.metrics import accuracy_score, confusion_matrix\n","\n","import tensorflow.keras as keras\n","import keras.optimizers as optimizers\n","from keras.models import Sequential\n","from keras.layers import Activation, MaxPooling2D, Dropout, Flatten, Reshape, Dense, Conv2D, GlobalAveragePooling2D, BatchNormalization\n","from keras.regularizers import l2\n","from keras.callbacks import ModelCheckpoint\n","\n","from keras.applications.vgg16 import VGG16\n","from keras.applications.vgg19 import VGG19\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","from keras.applications.densenet import DenseNet121\n","\n","\n","class pkg:\n","  #### DOWNLOADING AND LOADING DATA\n","  def get_metadata(metadata_path, which_splits = ['train', 'test']):  \n","    '''returns metadata dataframe which contains columns of:\n","       * index: index of data into numpy data\n","       * class: class of image\n","       * split: which dataset split is this a part of? \n","    '''\n","    metadata = pd.read_csv(metadata_path)\n","    keep_idx = metadata['split'].isin(which_splits)\n","    return metadata[keep_idx]\n","\n","  def get_data_split(split_name, flatten, all_data, metadata, image_shape):\n","    '''\n","    returns images (data), labels from folder of format [image_folder]/[split_name]/[class_name]/\n","    flattens if flatten option is True \n","    '''\n","    sub_df = metadata[metadata['split'].isin([split_name])]\n","    index  = sub_df['index'].values\n","    labels = sub_df['class'].values\n","    data = all_data[index,:]\n","    if flatten:\n","      data = data.reshape([-1, np.product(image_shape)])\n","    return data, labels\n","\n","  def get_train_data(flatten, all_data, metadata, image_shape):\n","    return get_data_split('train', flatten, all_data, metadata, image_shape)\n","\n","  def get_test_data(flatten, all_data, metadata, image_shape):\n","    return get_data_split('test', flatten, all_data, metadata, image_shape)\n","  \n","class helpers:\n","  #### PLOTTING\n","  def plot_one_image(data, labels = [], index = None, image_shape = [64,64,3]):\n","    '''\n","    if data is a single image, display that image\n","\n","    if data is a 4d stack of images, display that image\n","    '''\n","    num_dims   = len(data.shape)\n","    num_labels = len(labels)\n","\n","    # reshape data if necessary\n","    if num_dims == 1:\n","      data = data.reshape(target_shape)\n","    if num_dims == 2:\n","      data = data.reshape(np.vstack[-1, image_shape])\n","    num_dims   = len(data.shape)\n","\n","    # check if single or multiple images\n","    if num_dims == 3:\n","      if num_labels > 1:\n","        print('Multiple labels does not make sense for single image.')\n","        return\n","\n","      label = labels      \n","      if num_labels == 0:\n","        label = ''\n","      image = data\n","\n","    if num_dims == 4:\n","      image = data[index, :]\n","      label = labels[index]\n","\n","    # plot image of interest\n","    print('Label: %s'%label)\n","    plt.imshow(image)\n","    plt.show()\n","\n","  def plot_acc(history, ax = None, xlabel = 'Epoch #'):\n","    # i'm sorry for this function's code. i am so sorry. \n","    history = history.history\n","    history.update({'epoch':list(range(len(history['val_accuracy'])))})\n","    history = pd.DataFrame.from_dict(history)\n","\n","    best_epoch = history.sort_values(by = 'val_accuracy', ascending = False).iloc[0]['epoch']\n","\n","    if not ax:\n","      f, ax = plt.subplots(1,1)\n","    sns.lineplot(x = 'epoch', y = 'val_accuracy', data = history, label = 'Validation', ax = ax)\n","    sns.lineplot(x = 'epoch', y = 'accuracy', data = history, label = 'Training', ax = ax)\n","    ax.axhline(0.5, linestyle = '--',color='red', label = 'Chance')\n","    ax.axvline(x = best_epoch, linestyle = '--', color = 'green', label = 'Best Epoch')  \n","    ax.legend(loc = 4)    \n","    ax.set_ylim([0.4, 1])\n","\n","    ax.set_xlabel(xlabel)\n","    ax.set_ylabel('Accuracy (Fraction)')\n","    \n","    plt.show()\n","\n","class models:\n","  def DenseClassifier(hidden_layer_sizes, nn_params):\n","    model = Sequential()\n","    model.add(Flatten(input_shape = nn_params['input_shape']))\n","    model.add(Dropout(0.5))\n","\n","    for ilayer in hidden_layer_sizes:\n","      model.add(Dense(ilayer, activation = 'relu'))\n","      model.add(Dropout(0.5))\n","    \n","    model.add(Dense(units = nn_params['output_neurons'], activation = nn_params['output_activation']))\n","    model.compile(loss=nn_params['loss'],\n","                  optimizer= keras.optimizers.SGD(learning_rate=1e-4, momentum=0.95),\n","                  metrics=['accuracy'])\n","    return model\n","\n","  def CNNClassifier(num_hidden_layers, nn_params):\n","    model = Sequential()\n","\n","    model.add(Conv2D(32, (3, 3), input_shape=nn_params['input_shape'], padding = 'same', kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))\n","    model.add(Activation('relu'))\n","    model.add(MaxPooling2D(pool_size=(2, 2)))\n","\n","    for i in range(num_hidden_layers-1):\n","        model.add(Conv2D(64, (3, 3), padding = 'same', kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))\n","        model.add(Activation('relu'))\n","        model.add(MaxPooling2D(pool_size=(2, 2)))\n","\n","    model.add(Flatten()) \n","\n","    model.add(Dense(units = 128, activation = 'relu'))\n","    model.add(Dropout(0.5))\n","    model.add(Dense(units = 64, activation = 'relu', kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))\n","    model.add(Dropout(0.5))\n","\n","    model.add(Dense(units = nn_params['output_neurons'], activation = nn_params['output_activation']))\n","\n","    # initiate RMSprop optimizer\n","    opt = keras.optimizers.legacy.RMSprop(learning_rate=1e-5, decay=1e-6)\n","\n","    # Let's train the model using RMSprop\n","    model.compile(loss=nn_params['loss'],\n","                  optimizer=opt,\n","                  metrics=['accuracy'])    \n","    return model\n","\n","  def TransferClassifier(name, nn_params, trainable = True):\n","    expert_dict = {'VGG16': VGG16, \n","                   'VGG19': VGG19,\n","                   'ResNet50':ResNet50,\n","                   'DenseNet121':DenseNet121}\n","\n","    expert_conv = expert_dict[name](weights = 'imagenet', \n","                                              include_top = False, \n","                                              input_shape = nn_params['input_shape'])\n","    for layer in expert_conv.layers:\n","      layer.trainable = trainable\n","      \n","    expert_model = Sequential()\n","    expert_model.add(expert_conv)\n","    expert_model.add(GlobalAveragePooling2D())\n","\n","    expert_model.add(Dense(128, activation = 'relu'))\n","    expert_model.add(Dropout(0.5))\n","\n","    expert_model.add(Dense(64, activation = 'relu'))\n","    expert_model.add(Dropout(0.5))\n","\n","    expert_model.add(Dense(nn_params['output_neurons'], activation = nn_params['output_activation']))\n","\n","    expert_model.compile(loss = nn_params['loss'], \n","                  optimizer = keras.optimizers.SGD(learning_rate=1e-4, momentum=0.9), \n","                  metrics=['accuracy'])\n","\n","    return expert_model\n","\n","### defining project variables\n","# file variables\n","metadata_url         = \"https://storage.googleapis.com/inspirit-ai-data-bucket-1/Data/AI%20Scholars/Sessions%206%20-%2010%20(Projects)/Project%20-%20(Healthcare%20A)%20Pneumonia/metadata.csv\"\n","image_data_url       = 'https://storage.googleapis.com/inspirit-ai-data-bucket-1/Data/AI%20Scholars/Sessions%206%20-%2010%20(Projects)/Project%20-%20(Healthcare%20A)%20Pneumonia/image_data.npy'\n","image_data_path      = './image_data.npy'\n","metadata_path        = './metadata.csv'\n","image_shape          = (64, 64, 3)\n","\n","# neural net parameters\n","nn_params = {}\n","nn_params['input_shape']       = image_shape\n","nn_params['output_neurons']    = 1\n","nn_params['loss']              = 'binary_crossentropy'\n","nn_params['output_activation'] = 'sigmoid'\n","\n","###\n","!wget -q --show-progress \"https://storage.googleapis.com/inspirit-ai-data-bucket-1/Data/AI%20Scholars/Sessions%206%20-%2010%20(Projects)/Project%20-%20(Healthcare%20A)%20Pneumonia/metadata.csv\"\n","!wget -q --show-progress \"https://storage.googleapis.com/inspirit-ai-data-bucket-1/Data/AI%20Scholars/Sessions%206%20-%2010%20(Projects)/Project%20-%20(Healthcare%20A)%20Pneumonia/image_data.npy\"\n","\n","### pre-loading all data of interest\n","_all_data = np.load('image_data.npy')\n","_metadata = pkg.get_metadata(metadata_path, ['train','test','field'])\n","\n","### preparing definitions\n","# downloading and loading data\n","get_data_split = pkg.get_data_split\n","get_metadata    = lambda :                 pkg.get_metadata(metadata_path, ['train','test'])\n","get_train_data  = lambda flatten = False : pkg.get_train_data(flatten = flatten, all_data = _all_data, metadata = _metadata, image_shape = image_shape)\n","get_test_data   = lambda flatten = False : pkg.get_test_data(flatten = flatten, all_data = _all_data, metadata = _metadata, image_shape = image_shape)\n","\n","# plotting\n","plot_one_image = lambda data, labels = [], index = None: helpers.plot_one_image(data = data, labels = labels, index = index, image_shape = image_shape);\n","plot_acc       = lambda history: helpers.plot_acc(history)\n","\n","# models with input parameters\n","DenseClassifier     = lambda hidden_layer_sizes: models.DenseClassifier(hidden_layer_sizes = hidden_layer_sizes, nn_params = nn_params);\n","CNNClassifier       = lambda num_hidden_layers: models.CNNClassifier(num_hidden_layers, nn_params = nn_params);\n","TransferClassifier  = lambda name: models.TransferClassifier(name = name, nn_params = nn_params);\n","\n","monitor = ModelCheckpoint('./model.h5', monitor='val_accuracy', verbose=0, save_best_only=True, save_weights_only=False, mode='auto', save_freq='epoch')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["metadata.csv        100%[===================>]  39.56K  --.-KB/s    in 0s      \n","image_data.npy      100%[===================>] 131.25M   189MB/s    in 0.7s    \n"]}]},{"cell_type":"markdown","metadata":{"id":"l-hvosCRrBGu"},"source":["## Instructor-led Discussion: Steps for Building a NN in Keras"]},{"cell_type":"markdown","metadata":{"id":"SYqvCKWpKfRM"},"source":["### What are neural networks?"]},{"cell_type":"markdown","metadata":{"id":"qA1Rc_u3KoJT"},"source":["Just as we went over last week, neural networks look something like this: \n","![A 2 layer neural network](https://cdn-images-1.medium.com/max/1600/1*DW0Ccmj1hZ0OvSXi7Kz5MQ.jpeg)\n"]},{"cell_type":"markdown","metadata":{"id":"3Q9S6SDcM8N9"},"source":["Each orange and blue node is a neuron. The network itself is composed of a bunch of neurons that talk to each other and eventually give us a prediction. Let's get a bit more concrete with this..."]},{"cell_type":"markdown","metadata":{"id":"E--8mjToZYBp"},"source":["To build neural networks in Python, we use the packages known as `tensorflow` and `keras`. Let's learn how to build and use these networks!"]},{"cell_type":"code","metadata":{"id":"cqFAnQCxsgRm"},"source":["# grab tools from our tensorflow and keras toolboxes!\n","import tensorflow.keras as keras\n","from keras.models import Sequential\n","from keras.layers import Activation, Dropout, Flatten, Dense, BatchNormalization\n","from keras import optimizers"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fq4G0hDwZKnM"},"source":["## Exercise (Coding): A 2-Layer Model"]},{"cell_type":"markdown","metadata":{"id":"Bj-Pt3wGCXRu"},"source":["\n","We're going to build this model: \n","\n","![](http://cs231n.github.io/assets/nn1/neural_net.jpeg)"]},{"cell_type":"markdown","metadata":{"id":"H-6WGeedvTCS"},"source":["This network can be described as: \n","* Input Layer: 3\n","* Layer 1 (Hidden): 4 neurons with the `'relu'` activation function\n","* Layer 2 (Output): 2 neurons with the `'softmax'` activation function\n","\n","We're going to set up a **Sequential** model by adding on a sequence of layers.\n","\n","Each layer will be **Dense**, meaning each neuron of the previous layer connects to each neuron of this layer.\n","\n","We'll compile our model to make it ready to use! We'll use:\n","- `loss = 'categorical_crossentropy'` (how to measure the model's performance while it trains)\n","- `optimizer = 'adam'` (an algorithm for adjusting the weights)\n","- `metric = 'accuracy'` (how to measure the model's performance at the end)\n","\n","Try it out below!"]},{"cell_type":"code","metadata":{"id":"-zgA-wPfvCyK"},"source":["# Fill in the blanks with your group!\n","### YOUR CODE HERE:\n","model_1 = Sequential()\n","model_1.add(Dense(4, input_shape = (3,), activation = 'relu'))\n","model_1.add(Dense(2, activation = 'softmax'))\n","model_1.compile(loss='categorical_crossentropy',\n","                optimizer = 'adam', \n","                metrics = ['accuracy'])\n","### END CODE"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uK_lyjxGpwv3","colab":{"base_uri":"https://localhost:8080/","height":123},"executionInfo":{"status":"ok","timestamp":1678594878388,"user_tz":480,"elapsed":229,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"186a69f9-f505-4b00-e5b1-dd4c7c6949b3"},"source":["#@title Double-click here if you want to read more detail!\n","\"\"\"\n","Let's walk though what each of these lines of code means!\n","\n","**1. Specify model**\n","\n","```\n","model = Sequential()\n","```\n","In this line of code, we build our network where the information flows from LEFT to RIGHT through the network in ONE DIRECTION as opposed to multiple directions. Neurons on the right never pass informations to neurons on the left of it. \n","\n","\n","**2. Add layers to the network**\n","```\n","model.add(Dense(4,input_shape = (3,), activation = 'softmax'))\n","```\n","In this code, we `add` a `layer` of neurons to our network. \n","\n","This layers consists of 4 neurons. Each neuron is DENSE and connects to all of the previous layer's inputs and all of the subsequent layers outputs. We specify that there are 3 inputs here.\n","\n","We also specify what kind of output the neuron will give. If you want the neuron to output a number between 0 and 1 (like a probability!) you would use 'softmax' or 'softmax'. If you want the neuron to output any number, you can use 'linear'! You'll also often see 'relu', which is when a neuron will only output positive numbers. \n","\n","```\n","model.add(Dense(1, activation = 'linear'))\n","```\n","This code adds ANOTHER layer to the network that has 1 neuron. This one neuron is used to predict a continuous value!\n","\n","**3. Turn the model on by compiling it** \n","\n","After having built the network, we want to train and use it, so we have to 'turn it on' and 'compile' it. To turn it on, we have to specify at the very least, a loss, an optimizer, and some ways of evaluating the model (metrics). Don't worry too much about what this means! Just know that this is necessary. \n","\n","```\n","model.compile(loss='mean_squared_error',\n","optimizer = 'adam',\n","metrics = ['mean_squared_error'])\n","  ```\n","\"\"\""],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nLet's walk though what each of these lines of code means!\\n\\n**1. Specify model**\\n\\n```\\nmodel = Sequential()\\n```\\nIn this line of code, we build our network where the information flows from LEFT to RIGHT through the network in ONE DIRECTION as opposed to multiple directions. Neurons on the right never pass informations to neurons on the left of it. \\n\\n\\n**2. Add layers to the network**\\n```\\nmodel.add(Dense(4,input_shape = (3,), activation = 'softmax'))\\n```\\nIn this code, we `add` a `layer` of neurons to our network. \\n\\nThis layers consists of 4 neurons. Each neuron is DENSE and connects to all of the previous layer's inputs and all of the subsequent layers outputs. We specify that there are 3 inputs here.\\n\\nWe also specify what kind of output the neuron will give. If you want the neuron to output a number between 0 and 1 (like a probability!) you would use 'softmax' or 'softmax'. If you want the neuron to output any number, you can use 'linear'! You'll also often see 'relu', which is when a neuron will only output positive numbers. \\n\\n```\\nmodel.add(Dense(1, activation = 'linear'))\\n```\\nThis code adds ANOTHER layer to the network that has 1 neuron. This one neuron is used to predict a continuous value!\\n\\n**3. Turn the model on by compiling it** \\n\\nAfter having built the network, we want to train and use it, so we have to 'turn it on' and 'compile' it. To turn it on, we have to specify at the very least, a loss, an optimizer, and some ways of evaluating the model (metrics). Don't worry too much about what this means! Just know that this is necessary. \\n\\n```\\nmodel.compile(loss='mean_squared_error',\\noptimizer = 'adam',\\nmetrics = ['mean_squared_error'])\\n  ```\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"IH2UGOK4vuZ4","cellView":"form","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678594887868,"user_tz":480,"elapsed":187,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"9f67d237-29eb-4e63-b6d5-f47ac87800b9"},"source":["#@title Run this to test if your model is right!\n","model_1_answer = Sequential()\n","model_1_answer.add(Dense(4, input_shape = (3,), activation = 'relu'))\n","model_1_answer.add(Dense(2, activation = 'softmax'))\n","model_1_answer.compile(loss='categorical_crossentropy',\n","optimizer = 'adam', \n","metrics = ['accuracy'])\n","\n","model_1_config = model_1.get_config()\n","\n","del model_1_config[\"name\"]\n","for layer in model_1_config[\"layers\"]:\n","  del layer[\"config\"][\"name\"]\n","\n","model_1_answer_config = model_1_answer.get_config()\n","\n","del model_1_answer_config[\"name\"]\n","for layer in model_1_answer_config[\"layers\"]:\n","  del layer[\"config\"][\"name\"]\n","\n","if model_1_answer_config == model_1_config:\n","  print('Good job! Your model worked')\n","else: \n","  print('Please check your code again!')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Good job! Your model worked\n"]}]},{"cell_type":"markdown","metadata":{"id":"GNBg8obslWlo"},"source":["This is a toy example, so we won't train our model with real data - but we can feed in some fake inputs to see what happens! **How many inputs do we need?**\n"]},{"cell_type":"code","metadata":{"id":"vE_C03CplcyY"},"source":["input_data = [[1,3,4]] #Fill in inputs here! How many?"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IJMbtRllotiY"},"source":["Let's try it out! What do **predict** and **predict_classes** do? How do you interpret the outputs?"]},{"cell_type":"code","metadata":{"id":"JIiU4_ngotGh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678594892690,"user_tz":480,"elapsed":503,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"2f464c59-e42a-492d-91cd-5ee38c826d4d"},"source":["print(model_1.predict(input_data))\n","print((model_1.predict(input_data) > 0.5).astype(\"int32\"))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 88ms/step\n","[[0.836797   0.16320296]]\n","1/1 [==============================] - 0s 46ms/step\n","[[1 0]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"ypsWJtgSl_OJ"},"source":["**How many outputs** are there? How would you interpret them?"]},{"cell_type":"markdown","metadata":{"id":"g9CmrRkgT5ZS"},"source":["# Milestone 2. Exploring Neural Networks\n","\n","Now, let's apply neural networks to our medical imaging problem!"]},{"cell_type":"markdown","metadata":{"id":"PD3Z0QamJF68"},"source":["\n","In our problem, we are given `images` of shape `(64,64,3)`, each assigned a label PNEUMONIA or HEALTHY. We want to identify the key things that we need to design our network. \n","\n","In your group, discuss: \n","\n","* What are our inputs?\n","* What is/are our outputs?\n","\n","How could this look in a neural network diagram?\n","\n","**Brainstorm and sketch out a neural network that would work for this problem, and share with the group!**\n","\n","**Optional Exercise:** Following the setup from Notebook 1, create and test a neural network using Scikit-learn for this problem. [MLPClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html) gives you a simple neural network!"]},{"cell_type":"code","metadata":{"id":"s2fStUprqjmY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678594898760,"user_tz":480,"elapsed":1432,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"fa83af4e-0a40-4955-e430-210e3d4e5d04"},"source":["#YOUR CODE HERE\n","from sklearn.neural_network import MLPClassifier\n","(train_data, train_labels) = get_train_data(flatten = True)\n","(test_data, test_labels) = get_test_data(flatten = True)\n","mlp = MLPClassifier(hidden_layer_sizes = (5))\n","mlp.fit(train_data, train_labels)\n","predictions = mlp.predict(test_data)\n","accuracy = accuracy_score(test_labels, predictions)\n","print(accuracy)\n","\n","#YOUR CODE HERE"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5\n"]}]},{"cell_type":"markdown","metadata":{"id":"S0xP2sDhOf4M"},"source":["## Activity 2a. Challenging pneumonia with our models"]},{"cell_type":"markdown","metadata":{"id":"47bngTjCT_pM"},"source":["Now, let's try out 'Convolutional Neural Networks'! Convolutional neural networks are networks that process images much like our visual system does. We'll use a Keras wrapper that abstracts away the details - talk to your instructor if you're interested in exploring CNN with more details!\n","\n","First, let's get our data. **Why do we not use flattened data for CNNs?**\n","\n"]},{"cell_type":"code","metadata":{"id":"YeA8gWV6sqai"},"source":["train_data, train_labels = get_train_data()\n","test_data, test_labels = get_test_data()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"01ayM3u3sXA-"},"source":["### Creating Models\n","Now, let's create a model! In fact, let's create two:\n","\n","\n","For a \"vanilla\" neural network:\n","\n","```\n","dense = DenseClassifier(hidden_layer_sizes = (64,32))\n","```\n","* hidden_layer_sizes: the number of neurons in each hidden layer\n","* epochs: the number of times that our network trains on all of the training data\n","\n","\n","For a convolutional neural network:\n","```\n","cnn = CNNClassifier(num_hidden_layers = 1)\n","```\n","* num_hidden_layers: the number of hidden layers\n","\n","**Create your models below!** Use any hidden layer sizes you like."]},{"cell_type":"code","metadata":{"id":"YTb16LvwtGNW"},"source":["#YOUR CODE HERE\n","dense = DenseClassifier(hidden_layer_sizes = (64,32))\n","cnn = CNNClassifier(num_hidden_layers = 1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pIFymjNnsNPC"},"source":["### Fitting and Scoring\n","Now, let's fit  our models!\n","\n","There are default parameters to `.fit` you can call:\n","\n","```\n","model_history = model.fit(train_data, train_labels, epochs = 100, validation_data = (test_data, test_labels), shuffle = True, callbacks = [monitor])\n","```\n","\n","The `shuffle` parameter is important for shuffling the training data before each epoch. The `monitor` callback is used to get a view on internal states and statistics of the model during training. Please don't change these parameters!\n","\n","**Fit your models below!**"]},{"cell_type":"code","metadata":{"id":"oUgtK9n6t2CU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678595176879,"user_tz":480,"elapsed":135230,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"ad9fe42b-6ce4-4278-ee7c-df5dac73c928"},"source":["#YOUR CODE HERE\n","dense_history = dense.fit(train_data, train_labels, epochs = 100, validation_data = (test_data, test_labels), shuffle = True, callbacks = [monitor])\n","cnn_history = cnn.fit(train_data, train_labels, epochs = 100, validation_data = (test_data, test_labels), shuffle = True, callbacks = [monitor])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2278 - accuracy: 0.9110 - val_loss: 0.5287 - val_accuracy: 0.7400\n","Epoch 2/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2385 - accuracy: 0.9055 - val_loss: 0.6247 - val_accuracy: 0.7175\n","Epoch 3/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2267 - accuracy: 0.9140 - val_loss: 0.6342 - val_accuracy: 0.7225\n","Epoch 4/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2411 - accuracy: 0.9060 - val_loss: 0.6990 - val_accuracy: 0.6950\n","Epoch 5/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2389 - accuracy: 0.9095 - val_loss: 0.5287 - val_accuracy: 0.7300\n","Epoch 6/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2336 - accuracy: 0.9180 - val_loss: 0.5437 - val_accuracy: 0.7475\n","Epoch 7/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2277 - accuracy: 0.9170 - val_loss: 0.6622 - val_accuracy: 0.7275\n","Epoch 8/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2269 - accuracy: 0.9125 - val_loss: 0.6292 - val_accuracy: 0.7275\n","Epoch 9/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2416 - accuracy: 0.9120 - val_loss: 0.6562 - val_accuracy: 0.7250\n","Epoch 10/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2222 - accuracy: 0.9205 - val_loss: 0.7069 - val_accuracy: 0.7150\n","Epoch 11/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2291 - accuracy: 0.9085 - val_loss: 0.6164 - val_accuracy: 0.7175\n","Epoch 12/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2142 - accuracy: 0.9230 - val_loss: 0.7462 - val_accuracy: 0.7100\n","Epoch 13/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2473 - accuracy: 0.9125 - val_loss: 0.5881 - val_accuracy: 0.7175\n","Epoch 14/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2288 - accuracy: 0.9120 - val_loss: 0.6100 - val_accuracy: 0.7275\n","Epoch 15/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2215 - accuracy: 0.9145 - val_loss: 0.5934 - val_accuracy: 0.7300\n","Epoch 16/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2382 - accuracy: 0.9100 - val_loss: 0.6164 - val_accuracy: 0.7250\n","Epoch 17/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2307 - accuracy: 0.9105 - val_loss: 0.6734 - val_accuracy: 0.7175\n","Epoch 18/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.2287 - accuracy: 0.9105 - val_loss: 0.6372 - val_accuracy: 0.7225\n","Epoch 19/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.2245 - accuracy: 0.9195 - val_loss: 0.7187 - val_accuracy: 0.7075\n","Epoch 20/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.2217 - accuracy: 0.9220 - val_loss: 0.6347 - val_accuracy: 0.7350\n","Epoch 21/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.2126 - accuracy: 0.9245 - val_loss: 0.6688 - val_accuracy: 0.7275\n","Epoch 22/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.2322 - accuracy: 0.9160 - val_loss: 0.7473 - val_accuracy: 0.7025\n","Epoch 23/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.2120 - accuracy: 0.9245 - val_loss: 0.6978 - val_accuracy: 0.7150\n","Epoch 24/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2263 - accuracy: 0.9200 - val_loss: 0.5874 - val_accuracy: 0.7300\n","Epoch 25/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2292 - accuracy: 0.9095 - val_loss: 0.5543 - val_accuracy: 0.7425\n","Epoch 26/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2058 - accuracy: 0.9250 - val_loss: 0.6028 - val_accuracy: 0.7325\n","Epoch 27/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2121 - accuracy: 0.9215 - val_loss: 0.6628 - val_accuracy: 0.7300\n","Epoch 28/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2215 - accuracy: 0.9145 - val_loss: 0.7020 - val_accuracy: 0.7150\n","Epoch 29/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2196 - accuracy: 0.9180 - val_loss: 0.6975 - val_accuracy: 0.7175\n","Epoch 30/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2123 - accuracy: 0.9240 - val_loss: 0.7739 - val_accuracy: 0.7100\n","Epoch 31/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2097 - accuracy: 0.9195 - val_loss: 0.7308 - val_accuracy: 0.7100\n","Epoch 32/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2173 - accuracy: 0.9155 - val_loss: 0.6428 - val_accuracy: 0.7275\n","Epoch 33/100\n","63/63 [==============================] - 0s 4ms/step - loss: 0.2013 - accuracy: 0.9205 - val_loss: 0.7106 - val_accuracy: 0.7150\n","Epoch 34/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2185 - accuracy: 0.9230 - val_loss: 0.7613 - val_accuracy: 0.7125\n","Epoch 35/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2223 - accuracy: 0.9175 - val_loss: 0.5973 - val_accuracy: 0.7175\n","Epoch 36/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2173 - accuracy: 0.9165 - val_loss: 0.7230 - val_accuracy: 0.7125\n","Epoch 37/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2189 - accuracy: 0.9245 - val_loss: 0.6935 - val_accuracy: 0.7125\n","Epoch 38/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2336 - accuracy: 0.9150 - val_loss: 0.6712 - val_accuracy: 0.7175\n","Epoch 39/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2229 - accuracy: 0.9105 - val_loss: 0.5351 - val_accuracy: 0.7225\n","Epoch 40/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2062 - accuracy: 0.9260 - val_loss: 0.7770 - val_accuracy: 0.7125\n","Epoch 41/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2232 - accuracy: 0.9190 - val_loss: 0.5696 - val_accuracy: 0.7325\n","Epoch 42/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2008 - accuracy: 0.9280 - val_loss: 0.6899 - val_accuracy: 0.7175\n","Epoch 43/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2047 - accuracy: 0.9215 - val_loss: 0.7594 - val_accuracy: 0.7125\n","Epoch 44/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2001 - accuracy: 0.9300 - val_loss: 0.6279 - val_accuracy: 0.7200\n","Epoch 45/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2000 - accuracy: 0.9250 - val_loss: 0.7609 - val_accuracy: 0.7125\n","Epoch 46/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2004 - accuracy: 0.9205 - val_loss: 0.7062 - val_accuracy: 0.7125\n","Epoch 47/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2049 - accuracy: 0.9245 - val_loss: 0.7912 - val_accuracy: 0.7125\n","Epoch 48/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2255 - accuracy: 0.9215 - val_loss: 0.6007 - val_accuracy: 0.7175\n","Epoch 49/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2088 - accuracy: 0.9180 - val_loss: 0.6543 - val_accuracy: 0.7275\n","Epoch 50/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2095 - accuracy: 0.9180 - val_loss: 0.7440 - val_accuracy: 0.7000\n","Epoch 51/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2118 - accuracy: 0.9205 - val_loss: 0.6168 - val_accuracy: 0.7225\n","Epoch 52/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2230 - accuracy: 0.9215 - val_loss: 0.8413 - val_accuracy: 0.7125\n","Epoch 53/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2128 - accuracy: 0.9250 - val_loss: 0.7368 - val_accuracy: 0.7175\n","Epoch 54/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2082 - accuracy: 0.9200 - val_loss: 0.6226 - val_accuracy: 0.7275\n","Epoch 55/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.2140 - accuracy: 0.9240 - val_loss: 0.7339 - val_accuracy: 0.7200\n","Epoch 56/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.2130 - accuracy: 0.9300 - val_loss: 0.6356 - val_accuracy: 0.7200\n","Epoch 57/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.2094 - accuracy: 0.9240 - val_loss: 0.5466 - val_accuracy: 0.7450\n","Epoch 58/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.2005 - accuracy: 0.9175 - val_loss: 0.7548 - val_accuracy: 0.7150\n","Epoch 59/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.1976 - accuracy: 0.9245 - val_loss: 0.5545 - val_accuracy: 0.7425\n","Epoch 60/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.2155 - accuracy: 0.9200 - val_loss: 0.6996 - val_accuracy: 0.7300\n","Epoch 61/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1981 - accuracy: 0.9290 - val_loss: 0.7965 - val_accuracy: 0.7100\n","Epoch 62/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1986 - accuracy: 0.9220 - val_loss: 0.7938 - val_accuracy: 0.7200\n","Epoch 63/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2255 - accuracy: 0.9215 - val_loss: 0.7136 - val_accuracy: 0.6975\n","Epoch 64/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2041 - accuracy: 0.9275 - val_loss: 0.7412 - val_accuracy: 0.7225\n","Epoch 65/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2000 - accuracy: 0.9245 - val_loss: 0.6749 - val_accuracy: 0.7200\n","Epoch 66/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1965 - accuracy: 0.9300 - val_loss: 0.7430 - val_accuracy: 0.7100\n","Epoch 67/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2094 - accuracy: 0.9285 - val_loss: 0.6344 - val_accuracy: 0.7325\n","Epoch 68/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2027 - accuracy: 0.9250 - val_loss: 0.5732 - val_accuracy: 0.7500\n","Epoch 69/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2053 - accuracy: 0.9225 - val_loss: 0.7558 - val_accuracy: 0.7125\n","Epoch 70/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2110 - accuracy: 0.9220 - val_loss: 0.6861 - val_accuracy: 0.7225\n","Epoch 71/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2047 - accuracy: 0.9295 - val_loss: 0.7519 - val_accuracy: 0.6975\n","Epoch 72/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2113 - accuracy: 0.9155 - val_loss: 0.7543 - val_accuracy: 0.7100\n","Epoch 73/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1986 - accuracy: 0.9255 - val_loss: 0.6003 - val_accuracy: 0.7275\n","Epoch 74/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1932 - accuracy: 0.9290 - val_loss: 0.6153 - val_accuracy: 0.7425\n","Epoch 75/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1936 - accuracy: 0.9275 - val_loss: 0.7391 - val_accuracy: 0.7275\n","Epoch 76/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1920 - accuracy: 0.9245 - val_loss: 0.7646 - val_accuracy: 0.7075\n","Epoch 77/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.1973 - accuracy: 0.9265 - val_loss: 0.7045 - val_accuracy: 0.7125\n","Epoch 78/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1863 - accuracy: 0.9230 - val_loss: 0.7341 - val_accuracy: 0.7275\n","Epoch 79/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1970 - accuracy: 0.9265 - val_loss: 0.6026 - val_accuracy: 0.7100\n","Epoch 80/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1837 - accuracy: 0.9365 - val_loss: 0.7526 - val_accuracy: 0.7250\n","Epoch 81/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1997 - accuracy: 0.9275 - val_loss: 0.6961 - val_accuracy: 0.7075\n","Epoch 82/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.2145 - accuracy: 0.9170 - val_loss: 0.6142 - val_accuracy: 0.7250\n","Epoch 83/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1844 - accuracy: 0.9320 - val_loss: 0.8391 - val_accuracy: 0.7125\n","Epoch 84/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1916 - accuracy: 0.9310 - val_loss: 0.8168 - val_accuracy: 0.7125\n","Epoch 85/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1950 - accuracy: 0.9200 - val_loss: 0.7918 - val_accuracy: 0.7050\n","Epoch 86/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.1992 - accuracy: 0.9235 - val_loss: 0.7067 - val_accuracy: 0.7250\n","Epoch 87/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1884 - accuracy: 0.9235 - val_loss: 0.7619 - val_accuracy: 0.7250\n","Epoch 88/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1928 - accuracy: 0.9265 - val_loss: 0.7174 - val_accuracy: 0.7225\n","Epoch 89/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1896 - accuracy: 0.9300 - val_loss: 0.8089 - val_accuracy: 0.7075\n","Epoch 90/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1955 - accuracy: 0.9240 - val_loss: 0.8765 - val_accuracy: 0.7125\n","Epoch 91/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.1919 - accuracy: 0.9305 - val_loss: 0.7726 - val_accuracy: 0.7075\n","Epoch 92/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.1859 - accuracy: 0.9335 - val_loss: 0.6957 - val_accuracy: 0.7300\n","Epoch 93/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.1948 - accuracy: 0.9250 - val_loss: 0.6893 - val_accuracy: 0.7325\n","Epoch 94/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.1938 - accuracy: 0.9220 - val_loss: 0.7630 - val_accuracy: 0.7175\n","Epoch 95/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.2009 - accuracy: 0.9235 - val_loss: 0.7085 - val_accuracy: 0.7200\n","Epoch 96/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1982 - accuracy: 0.9280 - val_loss: 0.7707 - val_accuracy: 0.7125\n","Epoch 97/100\n","63/63 [==============================] - 0s 6ms/step - loss: 0.2017 - accuracy: 0.9205 - val_loss: 0.7572 - val_accuracy: 0.7050\n","Epoch 98/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1947 - accuracy: 0.9290 - val_loss: 0.8298 - val_accuracy: 0.7050\n","Epoch 99/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1945 - accuracy: 0.9210 - val_loss: 0.6997 - val_accuracy: 0.7200\n","Epoch 100/100\n","63/63 [==============================] - 0s 5ms/step - loss: 0.1879 - accuracy: 0.9345 - val_loss: 0.7849 - val_accuracy: 0.7175\n","Epoch 1/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.9485 - accuracy: 0.9205 - val_loss: 1.0620 - val_accuracy: 0.8325\n","Epoch 2/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.9444 - accuracy: 0.9215 - val_loss: 1.0806 - val_accuracy: 0.8250\n","Epoch 3/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.9272 - accuracy: 0.9340 - val_loss: 1.0759 - val_accuracy: 0.8225\n","Epoch 4/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.9201 - accuracy: 0.9260 - val_loss: 1.0700 - val_accuracy: 0.8200\n","Epoch 5/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.9102 - accuracy: 0.9295 - val_loss: 1.1434 - val_accuracy: 0.7975\n","Epoch 6/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.9032 - accuracy: 0.9330 - val_loss: 1.0695 - val_accuracy: 0.8200\n","Epoch 7/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.8847 - accuracy: 0.9380 - val_loss: 1.0253 - val_accuracy: 0.8325\n","Epoch 8/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.8813 - accuracy: 0.9320 - val_loss: 1.0619 - val_accuracy: 0.8200\n","Epoch 9/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.8725 - accuracy: 0.9390 - val_loss: 1.1624 - val_accuracy: 0.7875\n","Epoch 10/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.8673 - accuracy: 0.9345 - val_loss: 1.0062 - val_accuracy: 0.8300\n","Epoch 11/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.8607 - accuracy: 0.9345 - val_loss: 1.0238 - val_accuracy: 0.8200\n","Epoch 12/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.8409 - accuracy: 0.9500 - val_loss: 1.0152 - val_accuracy: 0.8250\n","Epoch 13/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.8310 - accuracy: 0.9400 - val_loss: 1.0228 - val_accuracy: 0.8150\n","Epoch 14/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.8360 - accuracy: 0.9390 - val_loss: 1.0915 - val_accuracy: 0.7925\n","Epoch 15/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.8178 - accuracy: 0.9465 - val_loss: 0.9846 - val_accuracy: 0.8300\n","Epoch 16/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.8071 - accuracy: 0.9440 - val_loss: 0.9798 - val_accuracy: 0.8225\n","Epoch 17/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.8009 - accuracy: 0.9480 - val_loss: 1.0312 - val_accuracy: 0.8150\n","Epoch 18/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.7957 - accuracy: 0.9455 - val_loss: 0.9536 - val_accuracy: 0.8375\n","Epoch 19/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.7887 - accuracy: 0.9495 - val_loss: 1.0673 - val_accuracy: 0.7975\n","Epoch 20/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.7841 - accuracy: 0.9455 - val_loss: 1.0364 - val_accuracy: 0.8025\n","Epoch 21/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.7760 - accuracy: 0.9445 - val_loss: 1.0345 - val_accuracy: 0.8025\n","Epoch 22/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.7681 - accuracy: 0.9505 - val_loss: 1.1273 - val_accuracy: 0.7750\n","Epoch 23/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.7596 - accuracy: 0.9520 - val_loss: 1.0697 - val_accuracy: 0.7875\n","Epoch 24/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.7465 - accuracy: 0.9445 - val_loss: 1.0318 - val_accuracy: 0.7975\n","Epoch 25/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.7378 - accuracy: 0.9550 - val_loss: 1.0497 - val_accuracy: 0.7875\n","Epoch 26/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.7327 - accuracy: 0.9540 - val_loss: 1.0617 - val_accuracy: 0.7875\n","Epoch 27/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.7259 - accuracy: 0.9570 - val_loss: 0.9430 - val_accuracy: 0.8225\n","Epoch 28/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.7287 - accuracy: 0.9565 - val_loss: 1.1116 - val_accuracy: 0.7625\n","Epoch 29/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.7152 - accuracy: 0.9555 - val_loss: 0.9839 - val_accuracy: 0.8125\n","Epoch 30/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.7172 - accuracy: 0.9590 - val_loss: 1.0872 - val_accuracy: 0.7700\n","Epoch 31/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.6971 - accuracy: 0.9575 - val_loss: 1.0746 - val_accuracy: 0.7775\n","Epoch 32/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.6915 - accuracy: 0.9600 - val_loss: 0.9611 - val_accuracy: 0.8150\n","Epoch 33/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.6911 - accuracy: 0.9585 - val_loss: 1.0192 - val_accuracy: 0.7950\n","Epoch 34/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.6843 - accuracy: 0.9565 - val_loss: 0.9875 - val_accuracy: 0.8000\n","Epoch 35/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.6793 - accuracy: 0.9620 - val_loss: 1.0331 - val_accuracy: 0.7850\n","Epoch 36/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.6763 - accuracy: 0.9580 - val_loss: 1.0167 - val_accuracy: 0.7875\n","Epoch 37/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.6617 - accuracy: 0.9620 - val_loss: 1.0535 - val_accuracy: 0.7725\n","Epoch 38/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.6602 - accuracy: 0.9575 - val_loss: 1.0776 - val_accuracy: 0.7600\n","Epoch 39/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.6551 - accuracy: 0.9660 - val_loss: 0.9901 - val_accuracy: 0.7975\n","Epoch 40/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.6457 - accuracy: 0.9620 - val_loss: 1.0339 - val_accuracy: 0.7750\n","Epoch 41/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.6368 - accuracy: 0.9590 - val_loss: 1.0884 - val_accuracy: 0.7525\n","Epoch 42/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.6369 - accuracy: 0.9660 - val_loss: 1.0061 - val_accuracy: 0.7825\n","Epoch 43/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.6305 - accuracy: 0.9620 - val_loss: 1.0605 - val_accuracy: 0.7650\n","Epoch 44/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.6233 - accuracy: 0.9630 - val_loss: 1.0473 - val_accuracy: 0.7675\n","Epoch 45/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.6210 - accuracy: 0.9615 - val_loss: 1.1087 - val_accuracy: 0.7475\n","Epoch 46/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.6134 - accuracy: 0.9630 - val_loss: 1.0662 - val_accuracy: 0.7650\n","Epoch 47/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.6116 - accuracy: 0.9635 - val_loss: 1.1098 - val_accuracy: 0.7475\n","Epoch 48/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.6105 - accuracy: 0.9615 - val_loss: 1.1748 - val_accuracy: 0.7425\n","Epoch 49/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.6032 - accuracy: 0.9650 - val_loss: 1.0268 - val_accuracy: 0.7650\n","Epoch 50/100\n","63/63 [==============================] - 1s 12ms/step - loss: 0.5923 - accuracy: 0.9645 - val_loss: 1.0917 - val_accuracy: 0.7500\n","Epoch 51/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.5879 - accuracy: 0.9675 - val_loss: 1.1767 - val_accuracy: 0.7375\n","Epoch 52/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.5895 - accuracy: 0.9635 - val_loss: 1.0820 - val_accuracy: 0.7500\n","Epoch 53/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.5712 - accuracy: 0.9720 - val_loss: 1.0713 - val_accuracy: 0.7575\n","Epoch 54/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.5739 - accuracy: 0.9650 - val_loss: 1.1573 - val_accuracy: 0.7425\n","Epoch 55/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.5625 - accuracy: 0.9695 - val_loss: 1.0659 - val_accuracy: 0.7500\n","Epoch 56/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.5730 - accuracy: 0.9620 - val_loss: 1.1803 - val_accuracy: 0.7325\n","Epoch 57/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.5646 - accuracy: 0.9645 - val_loss: 1.1843 - val_accuracy: 0.7275\n","Epoch 58/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.5582 - accuracy: 0.9705 - val_loss: 0.9789 - val_accuracy: 0.7675\n","Epoch 59/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.5438 - accuracy: 0.9700 - val_loss: 1.2169 - val_accuracy: 0.7200\n","Epoch 60/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.5408 - accuracy: 0.9685 - val_loss: 1.1705 - val_accuracy: 0.7375\n","Epoch 61/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.5457 - accuracy: 0.9675 - val_loss: 1.1484 - val_accuracy: 0.7400\n","Epoch 62/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.5348 - accuracy: 0.9680 - val_loss: 1.2138 - val_accuracy: 0.7225\n","Epoch 63/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.5292 - accuracy: 0.9655 - val_loss: 1.0212 - val_accuracy: 0.7550\n","Epoch 64/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.5268 - accuracy: 0.9695 - val_loss: 0.9371 - val_accuracy: 0.7775\n","Epoch 65/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.5200 - accuracy: 0.9705 - val_loss: 1.0783 - val_accuracy: 0.7500\n","Epoch 66/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.5204 - accuracy: 0.9720 - val_loss: 1.1506 - val_accuracy: 0.7400\n","Epoch 67/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.5147 - accuracy: 0.9705 - val_loss: 0.9574 - val_accuracy: 0.7775\n","Epoch 68/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.5101 - accuracy: 0.9690 - val_loss: 1.0815 - val_accuracy: 0.7500\n","Epoch 69/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.5090 - accuracy: 0.9715 - val_loss: 1.1354 - val_accuracy: 0.7375\n","Epoch 70/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.5022 - accuracy: 0.9710 - val_loss: 1.1000 - val_accuracy: 0.7450\n","Epoch 71/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4959 - accuracy: 0.9695 - val_loss: 1.1274 - val_accuracy: 0.7400\n","Epoch 72/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.4936 - accuracy: 0.9695 - val_loss: 1.3036 - val_accuracy: 0.6950\n","Epoch 73/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4843 - accuracy: 0.9740 - val_loss: 1.1228 - val_accuracy: 0.7400\n","Epoch 74/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4861 - accuracy: 0.9720 - val_loss: 1.1712 - val_accuracy: 0.7275\n","Epoch 75/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4826 - accuracy: 0.9745 - val_loss: 1.0384 - val_accuracy: 0.7500\n","Epoch 76/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.4768 - accuracy: 0.9720 - val_loss: 1.1305 - val_accuracy: 0.7400\n","Epoch 77/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4759 - accuracy: 0.9730 - val_loss: 0.9007 - val_accuracy: 0.7850\n","Epoch 78/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4732 - accuracy: 0.9685 - val_loss: 0.9069 - val_accuracy: 0.7775\n","Epoch 79/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4654 - accuracy: 0.9720 - val_loss: 1.1246 - val_accuracy: 0.7350\n","Epoch 80/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4554 - accuracy: 0.9740 - val_loss: 1.0497 - val_accuracy: 0.7475\n","Epoch 81/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4541 - accuracy: 0.9735 - val_loss: 1.0576 - val_accuracy: 0.7475\n","Epoch 82/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.4527 - accuracy: 0.9710 - val_loss: 1.1241 - val_accuracy: 0.7350\n","Epoch 83/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4512 - accuracy: 0.9765 - val_loss: 1.2139 - val_accuracy: 0.7150\n","Epoch 84/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4445 - accuracy: 0.9720 - val_loss: 1.1106 - val_accuracy: 0.7350\n","Epoch 85/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4439 - accuracy: 0.9735 - val_loss: 1.2741 - val_accuracy: 0.7050\n","Epoch 86/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.4435 - accuracy: 0.9690 - val_loss: 1.0602 - val_accuracy: 0.7450\n","Epoch 87/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.4402 - accuracy: 0.9700 - val_loss: 1.2158 - val_accuracy: 0.7100\n","Epoch 88/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.4251 - accuracy: 0.9755 - val_loss: 1.2800 - val_accuracy: 0.7075\n","Epoch 89/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.4274 - accuracy: 0.9730 - val_loss: 1.2273 - val_accuracy: 0.7150\n","Epoch 90/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.4199 - accuracy: 0.9755 - val_loss: 1.1073 - val_accuracy: 0.7350\n","Epoch 91/100\n","63/63 [==============================] - 1s 10ms/step - loss: 0.4192 - accuracy: 0.9735 - val_loss: 1.2547 - val_accuracy: 0.7100\n","Epoch 92/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.4232 - accuracy: 0.9715 - val_loss: 0.9598 - val_accuracy: 0.7675\n","Epoch 93/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.4067 - accuracy: 0.9785 - val_loss: 1.0440 - val_accuracy: 0.7475\n","Epoch 94/100\n","63/63 [==============================] - 1s 9ms/step - loss: 0.4050 - accuracy: 0.9805 - val_loss: 0.9867 - val_accuracy: 0.7550\n","Epoch 95/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.4061 - accuracy: 0.9770 - val_loss: 0.9234 - val_accuracy: 0.7700\n","Epoch 96/100\n","63/63 [==============================] - 1s 8ms/step - loss: 0.4046 - accuracy: 0.9755 - val_loss: 1.1321 - val_accuracy: 0.7275\n","Epoch 97/100\n","63/63 [==============================] - 0s 7ms/step - loss: 0.4024 - accuracy: 0.9760 - val_loss: 1.2545 - val_accuracy: 0.7100\n","Epoch 98/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.3950 - accuracy: 0.9730 - val_loss: 0.9197 - val_accuracy: 0.7675\n","Epoch 99/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.3957 - accuracy: 0.9755 - val_loss: 1.1853 - val_accuracy: 0.7150\n","Epoch 100/100\n","63/63 [==============================] - 0s 8ms/step - loss: 0.3866 - accuracy: 0.9775 - val_loss: 1.1981 - val_accuracy: 0.7150\n"]}]},{"cell_type":"markdown","metadata":{"id":"1NbTRTFluCNt"},"source":["**Can you interpret the numbers displayed? Which do you care about most?**\n","\n","*Hint*: \"validation set\" is similar to \"test set\"."]},{"cell_type":"markdown","metadata":{"id":"xlYo20_lttEA"},"source":["###Scoring\n","\n","Now, let's evaluate our models! To get the scores, you can use:\n","```\n","score = model.evaluate(test_data, test_labels)\n","```\n","\n","Then `score[0]` will be test loss and `score[1]` will be test accuracy.\n","\n"]},{"cell_type":"code","metadata":{"id":"tywOuLnPucIC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678595189369,"user_tz":480,"elapsed":304,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"49f1a56c-052b-4516-c494-6607f63ea6b3"},"source":["#YOUR CODE HERE to score your models\n","score_dense = dense.evaluate(test_data, test_labels)\n","score_cnn = cnn.evaluate(test_data, test_labels)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["13/13 [==============================] - 0s 3ms/step - loss: 0.7849 - accuracy: 0.7175\n","13/13 [==============================] - 0s 3ms/step - loss: 1.1981 - accuracy: 0.7150\n"]}]},{"cell_type":"markdown","metadata":{"id":"jakb5j_Hux7W"},"source":["**Which model did better? Any surprises?**"]},{"cell_type":"markdown","metadata":{"id":"ozaEE78ktkyw"},"source":["### Plotting\n","\n","A great way to understand our model better is to plot the training and test accuracy over time with `plot_acc(model_history)`.\n","\n","**What do you observe of the training and test accuracy over the training epochs?**\n","\n","Discuss this with your group and your instructor! What problems are we experiencing? How can we fix them? "]},{"cell_type":"code","metadata":{"id":"_nBfrnjIXzdp","colab":{"base_uri":"https://localhost:8080/","height":549},"executionInfo":{"status":"ok","timestamp":1678595192820,"user_tz":480,"elapsed":646,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"fac07db6-7d65-49af-d6cf-fcda89fb6cf7"},"source":["#YOUR CODE HERE\n","plot_acc(dense_history)\n","plot_acc(cnn_history)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"i3wqKrSyVBqr"},"source":["## Instructor-Led Discussion: Overfitting\n","\n","**Questions:**\n","Was the best epoch necessarily the last epoch? \n","\n","You should check what the best epoch was at every step of the way!\n","\n","**When does your model overfit? How could we fix it?**\n","\n","**Experiment with different network structures** before you move on!"]},{"cell_type":"markdown","metadata":{"id":"G5scKiYAYE8g"},"source":["\n","# Milestone 3. Expert models: Transfer learning"]},{"cell_type":"markdown","metadata":{"id":"FybhlxdVYFbv"},"source":["\n","## Instructor-Led Discussion: Transfer Learning\n"]},{"cell_type":"markdown","metadata":{"id":"3Bx5nyzE36EQ"},"source":["So far, we've used models that were built from 'scratch'. Unfortunately, our training data is small relative to the amount of data available in the real world, so just training on our dataset is going to be inherently limited. \n","\n","Luckily, there are **expert models**, or state-of-the-art models that have been trained by the world's top researchers! While these expert models haven't trained on our training data, they have trained extensively on larger datasets. We can input our data and reasonably expect that they will pick up our task fairly quickly. \n","\n","In deep learning, the idea of using a model trained on another task as a starting point for your model is known as **transfer learning**. "]},{"cell_type":"markdown","metadata":{"id":"DChmzlt3ARPy"},"source":["### VGG 16"]},{"cell_type":"markdown","metadata":{"id":"lFtHOYI2AdSs"},"source":["For our transfer learning, we're going to use 'experts' built upon the famous 'ImageNet' classification problem. \n","\n","In ImageNet, participants were challenged to build machine learning models that could distinguish 14 million images' categories, where there were > 20,000 categories available. \n","\n","Below, we see examples of 4 different categories. \n","\n","![](http://cs231n.github.io/assets/trainset.jpg)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"J-E_AiG-CFj0"},"source":["One of the experts we can use is VGG16. VGG16 is a specific convolutional neural network that was allowed to study the 14 million images 74 times. *(Read more about VGG16 [here!](https://neurohive.io/en/popular-networks/vgg16/))*\n","\n","After training, VGG16 was able to guess something close to the real label (top-5 accuracy) better than a human can."]},{"cell_type":"markdown","metadata":{"id":"IvkajtdHAbzL"},"source":["![](https://cdn-images-1.medium.com/max/1600/0*V1muWIDnPVwZUuEv.png)"]},{"cell_type":"markdown","metadata":{"id":"Vwj8o5X3D325"},"source":["We're going to take an expert model like VGG16 and let it train on OUR x-rays. Hopefully, its experience with those 14 million images will help it differentiate between healthy and pneumonia-affected x-rays. "]},{"cell_type":"markdown","metadata":{"id":"g-357WWC7qJJ"},"source":["### Exercise (Coding) | Within a student group"]},{"cell_type":"markdown","metadata":{"id":"uz_mVsECHvro"},"source":["Let's tap an expert model to help us out with our pneumonia prediction!\n","\n","We provide a wrapper that lets you 'call' up and employ expert models. You can call it like...\n","\n","```\n","transfer = TransferClassifier(name = 'VGG16')\n","```\n","\n","The experts we have on hand are:\n","* `VGG16`\n","* `VGG19`\n","* `ResNet50`\n","* `DenseNet121`\n","\n","There are default parameters to model.fit you can call:\n","\n","`model.fit(train_data, train_labels, epochs = N, validation_data = (test_data, test_labels), shuffle = True, callbacks = [monitor])`\n","\n","The `shuffle` parameter is important for shuffling the training data before each epoch. The `[monitor]` callback is used to get a view on internal states and statistics of the model during training. Do not change these parameters!\n","\n","**Please experiment with using these experts! Remember to fit and score your model, and to take a look at the training history.**\n","\n","How many epochs do you need now?\n"]},{"cell_type":"code","metadata":{"id":"0VB79BCx7tvg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678595366109,"user_tz":480,"elapsed":84548,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"47c83007-b33d-4b1f-ac34-956b202a4301"},"source":["### YOUR CODE HERE\n","transfer = TransferClassifier(name = 'VGG16')\n","transfer.fit(train_data, train_labels, epochs = 15, validation_data = (test_data, test_labels), shuffle = True, callbacks = [monitor])\n","### END CODE"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","58889256/58889256 [==============================] - 0s 0us/step\n","Epoch 1/15\n","63/63 [==============================] - 8s 74ms/step - loss: 0.6708 - accuracy: 0.6160 - val_loss: 0.4793 - val_accuracy: 0.8375\n","Epoch 2/15\n","63/63 [==============================] - 4s 58ms/step - loss: 0.4198 - accuracy: 0.8160 - val_loss: 0.3068 - val_accuracy: 0.8800\n","Epoch 3/15\n","63/63 [==============================] - 4s 58ms/step - loss: 0.2874 - accuracy: 0.8940 - val_loss: 0.2976 - val_accuracy: 0.8850\n","Epoch 4/15\n","63/63 [==============================] - 3s 55ms/step - loss: 0.2202 - accuracy: 0.9210 - val_loss: 0.5469 - val_accuracy: 0.7950\n","Epoch 5/15\n","63/63 [==============================] - 3s 55ms/step - loss: 0.1735 - accuracy: 0.9450 - val_loss: 0.4122 - val_accuracy: 0.8450\n","Epoch 6/15\n","63/63 [==============================] - 3s 54ms/step - loss: 0.1678 - accuracy: 0.9445 - val_loss: 0.5692 - val_accuracy: 0.8075\n","Epoch 7/15\n","63/63 [==============================] - 3s 55ms/step - loss: 0.1555 - accuracy: 0.9525 - val_loss: 0.7757 - val_accuracy: 0.7475\n","Epoch 8/15\n","63/63 [==============================] - 4s 58ms/step - loss: 0.1316 - accuracy: 0.9600 - val_loss: 0.3548 - val_accuracy: 0.8775\n","Epoch 9/15\n","63/63 [==============================] - 4s 56ms/step - loss: 0.1406 - accuracy: 0.9570 - val_loss: 0.8013 - val_accuracy: 0.7525\n","Epoch 10/15\n","63/63 [==============================] - 3s 54ms/step - loss: 0.1258 - accuracy: 0.9585 - val_loss: 1.0683 - val_accuracy: 0.6775\n","Epoch 11/15\n","63/63 [==============================] - 4s 57ms/step - loss: 0.1190 - accuracy: 0.9590 - val_loss: 1.1027 - val_accuracy: 0.6750\n","Epoch 12/15\n","63/63 [==============================] - 4s 56ms/step - loss: 0.1039 - accuracy: 0.9680 - val_loss: 0.8185 - val_accuracy: 0.7350\n","Epoch 13/15\n","63/63 [==============================] - 3s 53ms/step - loss: 0.0934 - accuracy: 0.9690 - val_loss: 0.8377 - val_accuracy: 0.7700\n","Epoch 14/15\n","63/63 [==============================] - 3s 53ms/step - loss: 0.1189 - accuracy: 0.9640 - val_loss: 1.3212 - val_accuracy: 0.6350\n","Epoch 15/15\n","63/63 [==============================] - 3s 53ms/step - loss: 0.0986 - accuracy: 0.9705 - val_loss: 1.8200 - val_accuracy: 0.6025\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f70d8078a30>"]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"h9Qp129rNV3U"},"source":["# Milestone 4\n","## Instructor-led Discussion: Model Evaluation"]},{"cell_type":"markdown","metadata":{"id":"wwERVb37ylko"},"source":["## Activity 4a. How did we do on pneumonia prediction? "]},{"cell_type":"markdown","metadata":{"id":"sXyQLXigDbtg"},"source":["\n","\n","### Exercise (Coding) "]},{"cell_type":"markdown","metadata":{"id":"hBbSwkgVj7gS"},"source":["Set your best model to the one you have trained (e.g., the transfer learning model)."]},{"cell_type":"code","metadata":{"id":"TmjOJCGDjsMk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678595514798,"user_tz":480,"elapsed":391,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"dc53750b-cbf0-43d4-8984-d8abf4c1cc55"},"source":["transfer.evaluate(test_data,test_labels)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["13/13 [==============================] - 0s 18ms/step - loss: 1.8200 - accuracy: 0.6025\n"]},{"output_type":"execute_result","data":{"text/plain":["[1.8200347423553467, 0.6025000214576721]"]},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","metadata":{"id":"UBhDGS02VGHa"},"source":["As we learned last week, total accuracy does not reflect all that we want to know about a model's performance. It's just one metric out of many possible metrics for evaluating models. \n","\n","In the case of pneumonia prediction, we may be more interested in other quantities, such as 'how accurate were we on the pneumonia category?' or 'how accurate were we on the normal category?' or 'how much of pneumonia were confused for normal?' or vice versa. \n","\n"]},{"cell_type":"markdown","metadata":{"id":"T_GjNUEBMSke"},"source":["Our metrics for classification can be described in terms of a 'confusion matrix', shown below. \n","\n","![Confusion Matrix](https://cdn-images-1.medium.com/max/1600/1*Z54JgbS4DUwWSknhDCvNTQ.png)\n","\n","In a confusion matrix, we think in terms of 'actual' and 'predicted values'. If we take Pneumonia = 1/Positive and Normal = 0/Negative, then **what do TP, FP, TN, and FN mean?**\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"BL0ns-b9GBym"},"source":["The `sklearn` package makes calculating confusion matrices very quick! Its `metrics` submodule actually comes with a `confusion_matrix` tool. Let's start by grabbing that."]},{"cell_type":"code","metadata":{"id":"f2E5299cNEcp"},"source":["from sklearn.metrics import accuracy_score, confusion_matrix"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bvFawPv1NIyy"},"source":["To use `confusion_matrix`, we need:\n","* `labels`: the labels of the data (1 - PNEUMONIA or 0 - NORMAL)\n","* `predictions`: what our model thinks the labels are\n","\n","To get `predictions`, you'll want to use ```best_model.predict_classes(test_data)```. \n","\n","Please get the `predictions`, and use `accuracy_score` to print the overall test accuracy:"]},{"cell_type":"code","source":["best_model = transfer"],"metadata":{"id":"JFr1gNs9AWpb"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ke5_OhU1wlpU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678596082561,"user_tz":480,"elapsed":340,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"bbc1d0b4-970a-496c-cec2-692f432f2bc0"},"source":["#YOUR CODE HERE\n","prediction = (best_model.predict(test_data) > 0.5).astype(\"int32\")\n","print('Accuracy: ', accuracy_score(test_labels, predictions)*100.0)\n","print(accuracy)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["13/13 [==============================] - 0s 18ms/step\n","Accuracy:  50.0\n","0.5\n"]}]},{"cell_type":"markdown","metadata":{"id":"XcFGwTMDkCAp"},"source":["Now let's get our confusion matrix, and split it out into true positive, true negative, false positive, and false negative!"]},{"cell_type":"code","metadata":{"id":"O7omQvlbkSTn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678596094643,"user_tz":480,"elapsed":381,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"9de03840-39bf-4ccd-cf9c-81fa70b39d6d"},"source":["confusion = confusion_matrix(test_labels, predictions)\n","print(confusion)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[  0 200]\n"," [  0 200]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"8zQjmPA4w8wJ"},"source":["**How do you interpret each number?**"]},{"cell_type":"code","metadata":{"id":"K17HWY9Iw3gA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678596101360,"user_tz":480,"elapsed":468,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"87350e56-e643-434f-dc53-8f520e61d2a9"},"source":["tp  = confusion[1][1]\n","tn  = confusion[0][0] \n","fp = confusion[0][1]\n","fn = confusion[1][0]\n","\n","print('True positive: %d'%tp)\n","print('True negative: %d'%tn)\n","print('False positive: %d'%fp)\n","print('False negative: %d'%fn)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True positive: 200\n","True negative: 0\n","False positive: 200\n","False negative: 0\n"]}]},{"cell_type":"markdown","metadata":{"id":"eKlghw6_krXL"},"source":["We can visualize the confusion matrix with seaborn to make it easier for our eyes..."]},{"cell_type":"code","metadata":{"id":"Q0Cp60eokseD"},"source":["# grab our plotting package\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l_Jwv2-OktLb","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1678040750333,"user_tz":480,"elapsed":743,"user":{"displayName":"Adham","userId":"04961045654033668196"}},"outputId":"8c25a9da-41a4-4845-89d8-750cdd158915"},"source":["sns.heatmap(confusion, annot = True, fmt = 'd', cbar_kws={'label':'count'});\n","plt.ylabel('Actual');\n","plt.xlabel('Predicted');"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"lFj6JvhMxAwX"},"source":["**What do you notice about this confusion matrix?**"]},{"cell_type":"markdown","metadata":{"id":"mdnF7l8_khHU"},"source":["## Instructor-Led Discussion: Comparing False Positives and False Negatives"]},{"cell_type":"markdown","metadata":{"id":"r8Tt6kTRkTvm"},"source":["**Now that we have our confusion matrix, let's take a step back and discuss**\n","\n","What did our model confuse more? \n","* PNEUMONIA for NORMAL or...\n","* NORMAL for PNEUMONIA\n","\n","Why do you think it might have confused one for the other? \n","\n","**Discuss with your instructor what you got and also...**\n","\n","What is more problematic? False positives or False negatives? \n","\n","Which of these metrics do we want to keep low? \n","\n","**Optional challenge exercises:**\n","- Create a function to calculate [precision and recall](https://en.wikipedia.org/wiki/Precision_and_recall). Which one do you care about more?\n","- Experiment with your models to find one that optimizes for what you care about, not just accuracy!**"]},{"cell_type":"markdown","metadata":{"id":"u8KmugJ_N9BQ"},"source":["# Fin!\n"]},{"cell_type":"markdown","metadata":{"id":"RV85QOOGQ2xm"},"source":["To recap, we built neural network models to see if we can do better than our baseline models performed. It turns out that we can! And, also, by introducing convolutions to our networks (making the convolutional neural networks), we can improve by quite a lot. Finally, we employed pretrained 'expert' models to boost our performance even further.\n","\n","In the next section, we'll test out our models on actual field data!"]},{"cell_type":"markdown","metadata":{"id":"14rKID6MOo4N"},"source":["![](https://storage.googleapis.com/kaggle-competitions/kaggle/10338/logos/header.png)"]}]}